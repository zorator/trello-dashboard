{"version":3,"sources":["services/trello-api.js","components/Card.js","components/Board.js","components/Organization.js","services/useStorage.hook.js","components/NavBar.js","components/Anchors.js","App.js","index.js","components/Board.module.css","components/Card.module.css","components/Organization.module.css","config.js"],"names":["callApi","url","params","urlParams","URLSearchParams","key","Trello","token","fetch","method","mode","referrerPolicy","headers","then","res","json","cardsPromise","undefined","memberPromiseMap","Promise","all","lists","organizations","boards","cardsByList","reduce","result","card","idList","boardsByOrganization","board","forEach","list","cards","id","idOrganization","map","org","Card","data","useState","members","setMembers","useEffect","a","table","idMembers","idMember","TrelloApi","member","push","fetchMembers","labels","className","styles","join","href","target","rel","label","color","title","name","dir","avatarUrl","height","width","src","alt","fullName","username","initials","CardListName","Board","cardContainer","flatMap","Organization","displayName","useStorage","storageKey","initialState","sessionItem","localStorage","getItem","previousState","JSON","parse","value","setValue","setItem","stringify","removeItem","NavBar","onFilterChange","visible","setVisible","treeData","setTreeData","filter","setFilter","orga","children","includes","length","type","onClick","placement","onClose","selectable","checkable","checkedKeys","onCheck","Anchors","icon","offsetTop","renderLinks","element","Link","style","whiteSpace","App","setOrganization","filteredOrganization","setFilteredOrganizations","Header","position","zIndex","apiKey","Config","api_key","clientVersion","apiEndpoint","authEndpoint","intentEndpoint","authorizeName","authorizeType","authorizeOnSuccess","console","log","authorizeOnError","autoAuthorize","marginTop","Sider","padding","background","Content","organization","Footer","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.43b5ff84.chunk.js","sourcesContent":["import {Trello} from \"react-trello-client\";\n\n// we keep this dirty way to call the api, because the lib can't handle custom query params nor Promises 😥\nconst callApi = (url, params) => {\n    const urlParams = new URLSearchParams({...params, key: Trello.key(), token: Trello.token()})\n    return fetch('https://api.trello.com/1/' + url + '?' + urlParams, {\n        method: 'GET',\n        mode: 'cors',\n        referrerPolicy: 'no-referrer',\n        headers: {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n        }\n    }).then(res => res.json());\n}\n\nlet cardsPromise = undefined\nlet memberPromiseMap = {}\n\nconst getMember = (id) => {\n    if (memberPromiseMap[id] === undefined) {\n        memberPromiseMap[id] = callApi(\"members/\" + id);\n    }\n    return memberPromiseMap[id]\n}\nconst getMyCards = () => {\n    if (cardsPromise === undefined) {\n        cardsPromise = callApi('members/me/cards')\n    }\n    return cardsPromise\n}\n\nconst getMyBoards = () => callApi('members/me/boards', {lists: 'open'})\n\nconst getMyOrganizations = () => callApi('members/me/organizations')\n\nconst getHierarchy = () => {\n    return Promise.all([\n        getMyOrganizations(), getMyBoards(), getMyCards()\n    ]).then(([organizations, boards, cards]) => {\n        const cardsByList = cards.reduce((result, card) => {\n            result[card.idList] = [...result[card.idList] || [], card];\n            return result;\n        }, {})\n        const boardsByOrganization = boards.reduce((result, board) => {\n            board.lists.forEach(list => {\n                list.cards = cardsByList[list.id] || []\n            })\n            result[board.idOrganization] = [...result[board.idOrganization] || [], board];\n            return result;\n        }, {})\n        return organizations.map(org => {\n            org.boards = boardsByOrganization[org.id] || []\n            return org\n        })\n    })\n}\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n    getHierarchy,\n    getMember\n}\n","import styles from './Card.module.css'\nimport TrelloApi from \"../services/trello-api\";\nimport {useEffect, useState} from \"react\";\n\n\nfunction Card({data, list}) {\n\n    const [members, setMembers] = useState([])\n\n    useEffect(() => {\n        async function fetchMembers() {\n            let table = []\n            for (let idMember of data.idMembers) {\n                const member = await TrelloApi.getMember(idMember)\n                table.push(member)\n            }\n            setMembers(table)\n        }\n        fetchMembers();\n    }, [data.idMembers])\n\n    const labels = data.labels || []\n    return (\n        <a className={[styles.Card, \"list-card\"].join(' ')} href={data.url} target=\"_blank\" rel=\"noreferrer\">\n            <div className=\"list-card-details\">\n                <div className=\"list-card-labels\">\n                    {labels.map(label => <span key={label.id}\n                                               className={`card-label card-label-${label.color} mod-card-front`}\n                                               title={label.name}>\n                    <span className=\"label-text\">{label.name}</span>\n                </span>)}\n                </div>\n                <span className=\"list-card-title\" dir=\"auto\">{data.name}</span>\n                {/*<div className=\"badges\">\n                    <span className=\"js-badges\">\n                        <div className=\"badge js-checkitems-badge\" title=\"Éléments de checklist\">\n                        <span className=\"badge-icon icon-sm icon-checklist\"/>\n                        <span className=\"badge-text js-checkitems-badge-text\">0/3</span>\n                    </div>\n                    </span>\n                </div>*/}\n                <div className=\"list-card-members\">\n                    {members.map(member => <div key={member.id} className=\"member\">\n                            {member.avatarUrl ? <img\n                                    className=\"member-avatar\" height=\"30\" width=\"30\"\n                                    src={`${member.avatarUrl}/30.png`}\n                                    alt={`${member.fullName} (${member.username})`}\n                                    title={`${member.fullName} (${member.username})`}/>\n                                : <span className=\"member-initials\"\n                                        title={`${member.fullName} (${member.username})`}\n                                        aria-label={`${member.fullName} (${member.username})`}>{member.initials}</span>\n                            }\n                        </div>\n                    )}\n                </div>\n                {list ? <div className={styles.CardListName}>\n                    <span className=\"badge-icon icon-sm icon-list\"/> {list.name}\n                </div> : null}\n            </div>\n        </a>\n    );\n}\n\nexport default Card;\n","import styles from './Board.module.css'\nimport Card from \"./Card\";\n\nexport function Board({data}) {\n\n    return <div className={styles.Board} id={data.id}>\n        <h3><span className=\"badge-icon icon-sm icon-board\"/> <a href={data.url} target=\"_blank\" rel=\"noreferrer\">{data.name}</a></h3>\n        <div className={styles.cardContainer}>\n            {data.lists.flatMap(list =>\n                list.cards.map(card =>\n                    <Card data={card} list={list} key={card.id}/>\n                )\n            )}\n        </div>\n    </div>\n}\n","import {Board} from \"./Board\";\nimport styles from './Organization.module.css'\n\nexport function Organization({data}) {\n\n    return <div className={styles.Organization} id={data.id}>\n        <h2><span className=\"badge-icon icon-sm icon-organization\"/> <a href={data.url} target=\"_blank\" rel=\"noreferrer\">{data.displayName}</a></h2>\n        {data.boards.map((board) => <Board key={board.id} data={board}/>)}\n    </div>\n}\n","import { useEffect, useState } from 'react'\n\nfunction useStorage(\n    storageKey,\n    initialState\n){\n    let sessionItem = localStorage.getItem(storageKey);\n    let previousState = sessionItem ? JSON.parse(sessionItem) : initialState;\n    const [value, setValue] = useState(previousState);\n\n    useEffect(() => {\n        if (value) {\n            localStorage.setItem(storageKey, JSON.stringify(value))\n        } else {\n            localStorage.removeItem(storageKey)\n        }\n    }, [storageKey, value]);\n\n    return [value, setValue]\n}\n\nexport default useStorage\n","import {useEffect, useState} from \"react\";\nimport {Button, Drawer, Tree} from \"antd\";\nimport useStorage from \"../services/useStorage.hook\";\n\nfunction NavBar({organizations, onFilterChange}) {\n\n    const [visible, setVisible] = useState(false)\n    const [treeData, setTreeData] = useState([])\n    const [filter, setFilter] = useStorage('filter', [])\n\n    useEffect(() => {\n        setTreeData(organizations.map(orga => ({\n            title: <><span className=\"badge-icon icon-sm icon-organization\"/> {orga.displayName}</>,\n            key: orga.id,\n            children: orga.boards.map(board => ({\n                title: <><span className=\"badge-icon icon-sm icon-board\"/> {board.name}</>,\n                key: board.id,\n                children: board.lists.map(list => ({\n                    title: <><span className=\"badge-icon icon-sm icon-list\"/> {list.name}</>,\n                    key: list.id\n                }))\n            }))\n        })))\n    }, [organizations])\n\n    useEffect(() => {\n        onFilterChange(\n            organizations.map(orga => ({\n                ...orga, boards: orga.boards.map(board => ({\n                    // filter lists and empty lists\n                    ...board, lists: board.lists.filter(list => filter.includes(list.id))\n                                          .filter(list => list.cards.length > 0)\n                    // remove board without lists\n                })).filter(board => board.lists.length > 0)\n                // remove organization without boards\n            })).filter(orga => orga.boards.length > 0)\n        )\n    }, [onFilterChange, filter, organizations])\n\n    return <>\n        <Button type=\"primary\" onClick={() => setVisible(!visible)}>\n            Open Filter\n        </Button>\n        <Drawer title=\"Filter\" placement=\"left\" onClose={() => setVisible(false)} visible={visible}>\n            <Tree\n                selectable={false}\n                checkable\n                checkedKeys={filter}\n                onCheck={setFilter}\n                treeData={treeData}\n            />\n        </Drawer>\n    </>\n}\n\nexport default NavBar\n","import {useEffect, useState} from \"react\";\nimport {Anchor} from \"antd\";\n\nfunction Anchors({organizations}) {\n\n    const [treeData, setTreeData] = useState([])\n\n    useEffect(() => {\n        setTreeData(organizations.map(orga => ({\n            title: orga.displayName,\n            key: orga.id,\n            icon: 'icon-organization',\n            children: orga.boards.map(board => ({\n                title: board.name,\n                key: board.id,\n                icon: 'icon-board',\n                children: board.lists.map(list => ({\n                    title: list.name,\n                    key: list.id,\n                    icon: 'icon-list'\n                }))\n            }))\n        })))\n    }, [organizations])\n\n    const renderLinks = (element) => <Anchor.Link key={element.key} href={`#${element.key}`}\n                                                  style={{whiteSpace: 'normal'}}\n                                                  title={<>\n                                                      <span className={`badge-icon icon-sm ${element.icon}`}/> {element.title}\n                                                  </>}>\n        {(element.children || []).map(renderLinks)}\n    </Anchor.Link>\n\n    return <Anchor offsetTop={72}>\n        {treeData.map(renderLinks)}\n    </Anchor>\n}\n\nexport default Anchors\n","import {useEffect, useState} from \"react\";\nimport TrelloApi from './services/trello-api'\nimport {Organization} from \"./components/Organization\";\nimport {Layout} from \"antd\";\nimport NavBar from \"./components/NavBar\";\nimport TrelloClient from \"react-trello-client\";\nimport Config from './config'\nimport Anchors from \"./components/Anchors\";\n\nfunction App() {\n\n    const [organizations, setOrganization] = useState([])\n    const [filteredOrganization, setFilteredOrganizations] = useState([])\n\n    useEffect(() => {\n        TrelloApi.getHierarchy().then(setOrganization)\n    }, [])\n\n    return (\n        <Layout>\n            <Layout.Header style={{position: 'fixed', zIndex: 1, width: '100%'}}>\n                <TrelloClient\n                    apiKey={Config.api_key}\n                    clientVersion={1}\n                    apiEndpoint=\"https://api.trello.com\"\n                    authEndpoint=\"https://trello.com\"\n                    intentEndpoint=\"https://trello.com\"\n                    authorizeName=\"Trello Dashboard\"\n                    authorizeType=\"redirect\"\n                    authorizeOnSuccess={() => console.log('Login successful!')}\n                    authorizeOnError={() => console.log('Login error!')}\n                    autoAuthorize={true}\n                />\n                <NavBar organizations={organizations} onFilterChange={setFilteredOrganizations}/>\n            </Layout.Header>\n            <Layout style={{marginTop: 64}}>\n                <Layout.Sider style={{padding: 8, background: '#fff'}}>\n                    <Anchors organizations={filteredOrganization}/>\n                </Layout.Sider>\n                <Layout style={{padding: 8}}>\n                    <Layout.Content className=\"body-card-label-text\">\n                        {filteredOrganization.map((organization) => <Organization key={organization.id}\n                                                                                  data={organization}/>)}\n                    </Layout.Content>\n                    <Layout.Footer>\n                        Made with 🍺 by <a href=\"https://github.com/zorator/trello-dashboard\">@zorator</a>\n                    </Layout.Footer>\n                </Layout>\n            </Layout>\n        </Layout>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './trello.css';\nimport 'antd/dist/antd.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardContainer\":\"Board_cardContainer__8bmzk\",\"Board\":\"Board_Board__Zn9WF\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Card\":\"Card_Card__1k9eP\",\"CardListName\":\"Card_CardListName__1s_mZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Organization\":\"Organization_Organization__Klhcw\"};","module.exports = {\n    api_key: 'eca89f23d50dfcceeda83f5dafb7f501'\n}\n"],"sourceRoot":""}